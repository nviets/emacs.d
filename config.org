#+TITLE: Emacs Setup
#+OPTIONS: toc:nil num:nil ^:nil

* Packages
Load required packages
#+BEGIN_SRC emacs-lisp
(require 'autopair)
;(require 'company-nixos-options)
(require 'f)
(require 'golden-ratio)
(require 'haskell-mode)
(require 'helm)
(require 'helm-nixos-options)
;(require 'nixos-options)
(require 'nix-mode)
;(require 'nix-sandbox)
(require 'ob)
(require 'plantuml-mode)
(require 'poly-markdown)
(require 'rainbow-delimiters)
(require 'ranger)
(require 'smart-mode-line)
(require 'smooth-scrolling)
(require 'ssh)
(require 'undo-tree)
;(require 'powerline)
#+END_SRC

* Environment
** Set defaults
#+BEGIN_SRC emacs-lisp
;; line width set to 80 characters
(setq fill-column 80)
;; Save minibuffer history
(savehist-mode 1)
(setq history-length 1000)
;; Never insert tabs
;(set-default 'indent-tabs-mode nil)
(setq tab-width 2
      indent-tabs-mode nil)
;; Show me empty lines after buffer end
(set-default 'indicate-empty-lines t)
;; Don't be so stingy on the memory, we have lots now. It's the distant future.
(setq gc-cons-threshold 20000000)
;; Fontify org-mode code blocks
(setq org-src-fontify-natively t)
;; Represent undo-history as an actual tree (visualize with C-x u)
(setq undo-tree-mode-lighter "")
(global-undo-tree-mode)
;; Sentences do not need double spaces to end. Period.
(set-default 'sentence-end-double-space nil)
;; golden ratio windows
(golden-ratio-mode 1)
(setq golden-ratio-auto-scale t)
;; disable scroll bar, tool bar and menu
(scroll-bar-mode -1)
(tool-bar-mode -1)
(menu-bar-mode -1)
;; UTF-8 please
(setq locale-coding-system 'utf-8) ; pretty
(set-terminal-coding-system 'utf-8) ; pretty
(set-keyboard-coding-system 'utf-8) ; pretty
(set-selection-coding-system 'utf-8) ; please
(prefer-coding-system 'utf-8) ; with sugar on top
#+END_SRC
** Handy key bindings
#+BEGIN_SRC emacs-lisp
(global-set-key (kbd "RET") 'newline-and-indent)
(global-set-key (kbd "C-;") 'comment-or-uncomment-region)
(global-set-key (kbd "M-/") 'hippie-expand)
(global-set-key (kbd "C-+") 'text-scale-increase)
(global-set-key (kbd "C--") 'text-scale-decrease)
(global-set-key (kbd "C-c C-k") 'compile)
(global-set-key (kbd "C-x g") 'magit-status)
#+END_SRC
** Indentation and buffer clean up
#+BEGIN_SRC emacs-lisp
(defun untabify-buffer ()
  (interactive)
  (untabify (point-min) (point-max)))

(defun indent-buffer ()
  (interactive)
  (indent-region (point-min) (point-max)))

(defun cleanup-buffer ()
  "Perform a bunch of operations on the whitespace content of a buffer."
  (interactive)
  (indent-buffer)
  (untabify-buffer)
  (delete-trailing-whitespace))

(defun cleanup-region (beg end)
  "Remove tmux artifacts from region."
  (interactive "r")
  (dolist (re '("\\\\│\·*\n" "\W*│\·*"))
    (replace-regexp re "" nil beg end)))

(global-set-key (kbd "C-x M-t") 'cleanup-region)
(global-set-key (kbd "C-c n") 'cleanup-buffer)

(setq-default show-trailing-whitespace t)
#+END_SRC
** eshell enhancement
#+BEGIN_SRC emacs-lisp
(setq eshell-visual-commands
      '("less" "tmux" "htop" "top" "bash" "zsh" "fish" "nox"))

(setq eshell-visual-subcommands
      '(("git" "log" "l" "diff" "show")))

;; Prompt with a bit of help from http://www.emacswiki.org/emacs/EshellPrompt
(defmacro with-face (str &rest properties)
  `(propertize ,str 'face (list ,@properties)))

(defun eshell/abbr-pwd ()
  (let ((home (getenv "HOME"))
        (path (eshell/pwd)))
    (cond
     ((string-equal home path) "~")
     ((f-ancestor-of? home path) (concat "~/" (f-relative path home)))
     (path))))

(setq eshell-highlight-prompt nil)
(setq eshell-prompt-regexp "^[^#$\n]+[#$] ")

(setq eshell-cmpl-cycle-completions nil)
#+END_SRC
** Use the spacemacs theme
#+BEGIN_SRC emacs-lisp
(load-theme 'spacemacs-dark t)
#+END_SRC

** Custom Commands
#+BEGIN_SRC emacs-lisp
(defun wakeSparkler ()
  "Wake up sparkler."
  (interactive)
  (shell-command "wol 00:25:90:4e:15:52"))

(global-set-key (kbd "C-x :") 'wakeSparkler)
#+END_SRC
** Disable Bell
Disable the bell and flash the mode line instead.
#+BEGIN_SRC emacs-lisp
(setq ring-bell-function
      (lambda ()
	(let ((orig-fg (face-foreground 'mode-line)))
	  (set-face-foreground 'mode-line "#F2804F")
	  (run-with-idle-timer 0.1 nil
			       (lambda (fg) (set-face-foreground 'mode-line fg))
			                                      orig-fg))))
#+END_SRC

** Set Path
Set the PATH of the shell
#+BEGIN_SRC emacs-lisp
(setq exec-path (append exec-path '("/home/nathan/.nix-profile/bin")))
(setenv "PATH" (concat (getenv "PATH") ":/home/nathan/.local/bin:/home/nathan/.nix-profile/bin"))
(setenv "NIX_PATH" "nixpkgs=/home/nathan/.nix-defexpr/channels/nixpkgs")
(setenv "BROWSER" "/home/nathan/.nix-profile/bin/firefox")
;(setenv "BROWSER" "/mnt/c/Program\ Files\ (x86)/Google/Chrome/Application/chrome.exe")
(defun eshell-mode-hook-func ()
  (setq eshell-path-env (concat "/usr/local/bin:" eshell-path-env))
  (setenv "PATH" (concat "/usr/local/bin:" (getenv "PATH")))
  (define-key eshell-mode-map (kbd "M-s") 'other-window-or-split))
(setq browse-url-browser-function 'eww-browse-url)
#+END_SRC

** Transparently open and compress files
#+BEGIN_SRC emacs-lisp
(auto-compression-mode t)
#+END_SRC

** Enhance Mode Line
Enhance the mode line with some useful features
#+BEGIN_SRC lisp
(display-time-mode 1)
(sml/setup)
;(powerline-default-theme)
;(setq powerline-arrow-shape 'arrow)   ;; the defaul
#+END_SRC

** Helm
#+BEGIN_SRC emacs-lisp
(global-set-key (kbd "M-x") 'helm-M-x)
(put 'downcase-region 'disabled nil)
#+END_SRC

** Centralize ~ files
Back up ~ files to /temp and autopurge files over a week old.
#+BEGIN_SRC emacs-lisp
;(setq backup-directory-alist `(("." . ,(expand-file-name "backups"))))
;    (setq backup-directory-alist
;          `((".*" . ,temporary-file-directory)))
;    (setq auto-save-file-name-transforms
;          `((".*" ,temporary-file-directory t)))
;(message "Deleting old backup files...")
;(let ((week (* 60 60 24 7))
;      (current (float-time (current-time))))
;  (dolist (file (directory-files temporary-file-directory t))
;    (when (and (backup-file-name-p file)
;               (> (- current (float-time (fifth (file-attributes file))))
;                  week))
;      (message "%s" file)
;      (delete-file file))))
#+END_SRC

** Close without asking
Close files without asking unless the file needs to be saved
#+BEGIN_SRC emacs-lisp
(global-set-key [(control x) (k)] 'kill-this-buffer)
#+END_SRC
* Programming Tools

** Editing Niceties
#+BEGIN_SRC emacs-lisp
(ac-config-default)
(global-flycheck-mode)
(show-paren-mode 1)
(set-default 'indicate-empty-lines t)
#+END_SRC

** Org Mode
#+BEGIN_SRC emacs-lisp
(define-key global-map "\C-cl" 'org-store-link)
(define-key global-map "\C-ca" 'org-agenda)
(global-set-key "\C-cc" 'org-capture)
(global-set-key "\C-cb" 'org-switchb)
(setq org-log-done t)
(org-babel-do-load-languages
 'org-babel-load-languages
 '((shell . t)
   (R . t)
   (emacs-lisp . t)
   (haskell . t)
   (js . t)
   (C . t)))
(setq org-src-fontify-natively t
      org-confirm-babel-evaluate nil)
#+END_SRC

** R Environment
#+BEGIN_SRC emacs-lisp
(add-to-list 'auto-mode-alist '("\\.md" . poly-markdown-mode))
(add-to-list 'auto-mode-alist '("\\.rmd" . poly-markdown-mode))
(setq ess-use-auto-complete t)

#+END_SRC

** Haskell

Original setup
#+BEGIN_SRC emacs-lisp
;(eval-after-load 'haskell-mode
;  '(define-key haskell-mode-map [f8] 'haskell-navigate-imports))
;(eval-after-load 'haskell-mode '(progn
;  (define-key haskell-mode-map (kbd "C-c C-l") 'haskell-process-load-or-reload)
;  (define-key haskell-mode-map (kbd "C-c C-z") 'haskell-interactive-switch)
;  (define-key haskell-mode-map (kbd "C-c C-n C-t") 'haskell-process-do-type)
;  (define-key haskell-mode-map (kbd "C-c C-n C-i") 'haskell-process-do-info)
;  (define-key haskell-mode-map (kbd "C-c C-n C-c") 'haskell-process-cabal-build)
;  (define-key haskell-mode-map (kbd "C-c C-n c") 'haskell-process-cabal)))
;(eval-after-load 'haskell-cabal '(progn
;  (define-key haskell-cabal-mode-map (kbd "C-c C-z") 'haskell-interactive-switch)
;  (define-key haskell-cabal-mode-map (kbd "C-c C-k") 'haskell-interactive-mode-clear)
;  (define-key haskell-cabal-mode-map (kbd "C-c C-c") 'haskell-process-cabal-build)
;  (define-key haskell-cabal-mode-map (kbd "C-c c") 'haskell-process-cabal)))
;(eval-after-load 'haskell-mode
;  '(define-key haskell-mode-map (kbd "C-c C-o") 'haskell-compile))
;(eval-after-load 'haskell-cabal
;  '(define-key haskell-cabal-mode-map (kbd "C-c C-o") 'haskell-compile))
;(setq haskell-compile-cabal-build-command "stack build")
;(add-hook 'haskell-mode-hook #'rainbow-delimiters-mode)
#+END_SRC

**** New setup for haskell-ide-engine

Setup for emacs-lsp
#+BEGIN_SRC emacs-lisp
(require 'lsp-mode)

(lsp-define-stdio-client
 ;; This can be a symbol of your choosing. It will be used as a the
 ;; prefix for a dynamically generated function "-enable"; in this
 ;; case: lsp-prog-major-mode-enable
 lsp-prog-major-mode
 "language-id"
 ;; This will be used to report a project's root directory to the LSP
 ;; server.
 (lambda () default-directory)
 ;; This is the command to start the LSP server. It may either be a
 ;; string containing the path of the command, or a list wherein the
 ;; car is a string containing the path of the command, and the cdr
 ;; are arguments to that command.
 '("/my/lsp/server" "and" "args"))

;; Here we'll add the function that was dynamically generated by the
;; call to lsp-define-stdio-client to the major-mode hook of the
;; language we want to run it under.
;;
;; This function will turn lsp-mode on and call the command given to
;; start the LSP server.
(add-hook 'prog-major-mode #'lsp-prog-major-mode-enable)

;; enable imenu
(require 'lsp-imenu)
(add-hook 'lsp-after-open-hook 'lsp-enable-imenu)
#+END_SRC

Setup for lsp-ui
#+BEGIN_SRC emacs-lisp
(require 'lsp-ui)
(add-hook 'lsp-mode-hook 'lsp-ui-mode)
#+END_SRC

Setup for lsp-haskell
#+BEGIN_SRC emacs-lisp
(require 'lsp-haskell)
(add-hook 'lsp-mode-hook 'lsp-ui-mode)
(add-hook 'haskell-mode-hook #'lsp-haskell-enable)
(add-hook 'haskell-mode-hook 'flycheck-mode)
#+END_SRC

** Nix
#+BEGIN_SRC emacs-lisp
;(defvar nixos-options-json-file
;  (let* ((cmd
;          "echo /nix/store/jn75m2bvd8yfhx50yrflpbhyp0qdkiw2-options-json")
;          (dir (replace-regexp-in-string "\n\\'" ""
;                                         (shell-command-to-string cmd))))
;    (expand-file-name "share/doc/nixos/options.json" dir))
;  "Location of the options file.")

;(global-set-key (kbd "C-c C-S-n") 'helm-nixos-options)
;(add-to-list 'company-backends 'company-nixos-options)
(setq flycheck-command-wrapper-function
        (lambda (command) (apply 'nix-shell-command (nix-current-sandbox) command))
      flycheck-executable-find
        (lambda (cmd) (nix-executable-find (nix-current-sandbox) cmd)))
#+END_SRC

#+RESULTS:
| lambda | (cmd) | (nix-executable-find (nix-current-sandbox) cmd) |

** eshell
#+BEGIN_SRC emacs-lisp
(add-hook 'eshell-mode-hook 'eshell-mode-hook-func)
#+END_SRC

** SSH
#+BEGIN_SRC emacs-lisp
(add-hook 'ssh-mode-hook
              (lambda ()
                (setq ssh-directory-tracking-mode t)
                (shell-dirtrack-mode t)
                (setq dirtrackp nil)))
#+END_SRC

** Ranger
#+BEGIN_SRC emacs-lisp
(setq ranger-override-dired t)
(setq ranger-override-dired-mode t)
(setq ranger-parent-depth 2)
(setq ranger-preview-file t)
#+END_SRC

** Miscellaneous
Stuff that should be organized better
#+BEGIN_SRC lisp
(defalias 'yes-or-no-p 'y-or-n-p)
(random t)
#+END_SRC

